<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Deploy on Amazon ECS on JFrog DevOps Modernization Workshop</title>
    <link>/7_deploy_ecs.html</link>
    <description>Recent content in Deploy on Amazon ECS on JFrog DevOps Modernization Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language><atom:link href="/7_deploy_ecs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Configure AWS Secrets Manager for ECS</title>
      <link>/7_deploy_ecs/71_configure_ecs_secrets.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/7_deploy_ecs/71_configure_ecs_secrets.html</guid>
      <description>In the previous sections, we set up the JFrog CLI to authenticate and publish Docker images to Artifactory. In the next sections, we will add the same Artifactory credentials to AWS Secrets Manager. We will then use an IAM Role to allow Amazon ECS to authenticate with Artifactory, pull the image and deploy it.
Private registry authentication for ECS tasks using AWS Secrets Manager enables you to store your credentials securely and then reference them in your container definition.</description>
    </item>
    
    <item>
      <title>Configure an IAM Role for ECS</title>
      <link>/7_deploy_ecs/72_configure_ecs_role.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/7_deploy_ecs/72_configure_ecs_role.html</guid>
      <description>We now have our Artifactory credentials in the AWS Secrets Manager. Next, we must create an IAM role that will allow ECS to access our Artifactory secrets and deploy our image.
Before you can launch ECS container instances and register them into a cluster, you must create an IAM role for those container instances to use when they are launched. The Amazon ECS container agent makes calls to the Amazon ECS API on your behalf using this role.</description>
    </item>
    
    <item>
      <title>Deploy Your Image with ECS</title>
      <link>/7_deploy_ecs/73_deploy_your_image.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/7_deploy_ecs/73_deploy_your_image.html</guid>
      <description>The Amazon ECS first-run wizard guides you through the process of getting started with Amazon ECS using the Fargate launch type. The wizard gives you the option of creating a cluster and launching your application. It is a great way to get started with deploying your application with Amazon ECS. We will use the wizard to deploy our NPM application Docker image from Artifactory.
 Go to the Amazon ECS console first-run wizard.</description>
    </item>
    
    <item>
      <title>View Your Application</title>
      <link>/7_deploy_ecs/74_view_your_application.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/7_deploy_ecs/74_view_your_application.html</guid>
      <description>In the previous section, you deployed your image with Amazon ECS. Now let&amp;rsquo;s check it out!
 When complete, click on your deployed service, npm-app-service.  Click on the Tasks tab.  Ensure the Last status shows RUNNING before going to the next step. Click on the deploy-npm-app task. On the Details page of the task, locate the Public IP.  In your browser, go to https://&amp;lt;Public IP&amp;gt; to view your deployed web application.</description>
    </item>
    
  </channel>
</rss>
